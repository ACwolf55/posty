import { GetStaticProps, type  NextPage } from "next";
import Head from "next/head";
import {api} from "~/utils/api"

const ProfilePage: NextPage<{ username: string}> = ({username}) => {

  const {data,isLoading} = api.profile.getUserByUsername.useQuery({
    username
  })

  if(isLoading) return <h3>- Loading... -</h3>

  if(!data) return <h3>404</h3>

  console.log(data)

  return (
    <>
      <Head>
        <title>{data.username} Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
    <div className="relative h-48 border-b border-slate-400 bg-slate-600">
      <Image 
      src={data.profileImageUrl} 
      alt={`${data.username ?? ""}'s profile pic`}
      width={128}
      height={128}
      className="-mb-[64px] absolute bottom-0 left-0 ml-4 rounded-full border-4 border-black"
      />
      <div className="h-[64px]"></div>
      <h2 className="p-4"> {data.username}</h2>
      </div>
      </PageLayout>

  
    </>
  );
}

import superjson from "superjson";
import { appRouter } from "~/server/api/root";
import {prisma} from "~/server/db"
import { createProxySSGHelpers} from "@trpc/react-query/ssg"
import { type } from "os";
import { PageLayout } from "~/components/PageLayout";
import Image from "next/image";
    
  export const getStaticProps: GetStaticProps = async(context) =>{
    const ssg = createProxySSGHelpers({
      router:appRouter,
      ctx:{prisma, userId:null},
      transformer:superjson
    })

      const slug = context.params?.slug

      if( typeof slug !== "string") throw new Error("no slug")

      const username = slug.replace("@","")

      await ssg.profile.getUserByname.prefetch({username})

      return {
        props:{
         trpcState: ssg.dehydrate(),
         username
        }
      }
};

export const getStaticPaths =()=>{
  return {paths: [],fallback:"blocking  "}
}

export default ProfilePage;
