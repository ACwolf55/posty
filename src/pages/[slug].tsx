import { GetStaticProps, type  NextPage } from "next";
import Head from "next/head";
import {api} from "~/utils/api"
import { PageLayout } from "~/components/PageLayout";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
import { PostView } from "~/components/PostView";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";


const ProfileFeed = (props: {userId:string})=>{
    const {data, isLoading} = api.posts.getPostsByUserId.useQuery({userId: props.userId})

    if (isLoading) return <LoadingPage/>

    if (!data || data.length===0) return <p> User has not posted</p>

    return(
       <div className="flex flex-col">
          {data.map((fullPost)=>(<PostView {...fullPost} key={fullPost.post.id} />))}
       </div>
       )
      }

const ProfilePage: NextPage<{ username: string}> = ({username}) => {

  const {data,isLoading} = api.profile.getUserByUsername.useQuery({
    username
  })

  if(isLoading) return <h3>- Loading... -</h3>

  if(!data) return <h3>404</h3>

  console.log(data)

  return (
    <>
      <Head>
        <title>{data.username} Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
    <div className="relative h-48 border-b border-slate-400 bg-slate-600">
      <Image 
      src={data.profileImageUrl} 
      alt={`${data.username ?? ""}'s profile pic`}
      width={128}
      height={128}
      className="bg-black -mb-[64px] absolute bottom-0 left-0 ml-4 rounded-full border-4 border-black"
      />
      <div className="h-[64px]"></div>
      <h2 className="p-4 text-2xl font-bold"> {data.username}</h2>
      </div>
      <div className="border-b border-slate-400 w-full"></div>
      <ProfileFeed userId={data.id}/>
      </PageLayout>

  
    </>
  );
}

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();
  

  const slug = context.params?.slug;
  if (typeof slug !== "string") throw new Error("no slug");

  const username = slug.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};



  

export const getStaticPaths =()=>{
  return {paths: [],fallback:"blocking"}
}

export default ProfilePage;
