import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Image from 'next/image'

import { LoadingSpinner } from "~/components/LoadingSpinner";

import { RouterOutputs, api } from "~/utils/api";

import dayjs from "dayjs"
import relativeTime from "dayjs/plugin/relativeTime"

dayjs.extend(relativeTime)

const CreatePostWizard =()=>{
   
    const {user} = useUser()

    const [input,setInput] = useState("")

    const { mutate} = api.posts.create.useMutation()

    if (!user) return null

    return  (
      <div className="flex gap-3 w-full">
          <Image src={user.profileImageUrl}
           alt="Profile image"
            className="w-14 h-14 rounded-full"
            width={56}
            height={56}
            />
      <input placeholder="post your posty post here ~!" 
      className="bg-transparent grow"
      type='test'
      value={input}
      onChange={(e)=>setInput(e.target.value)}
      />
      <button onClick={()=>mutate({ content: input})}>Post</button>

      </div>
    )
}

type PostWithUser = RouterOutputs["posts"]["getAll"][number]

const PostView =(props : PostWithUser)=>{
  const {post,author} = props
  console.log('author',author)
return(
  <div className="flex p-4 gap-3 border-b border-slate-400" key={post.id}>
    <Image src={author.profilePicture}
     className="w-14 h-14 rounded-full"
      alt={`@${author.username}'s profile picture`}
      width={56}
      height={56}
      />

    <div className="flex flex-col">
      <div className="flex text-slate-200 gap-1">
        <span>@{author.username}</span> 
        <span className="font-thin">{` Â· ${dayjs(post.createdAt).fromNow()} `}</span>
        </div>
      <span className="text-xl">{post.content}</span>
    </div>
    </div>
)
}  

const Feed =()=>{

  const {data, isLoading: postsLoading} = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingSpinner />;

  if (!data) return <p> Something went wrong</p>;

  return(
      <div className='flex flex-col'>
       {data.map((fullPost)=> (
        <PostView {...fullPost} key={fullPost.post.id} />
       ))}
      </div>
  )


}

const Home: NextPage = () => {

  // const hello = api.example.hello.useQuery({ text: "from tRPC" });


  const { isLoaded: userLoaded, isSignedIn} = useUser()
  
  //will fetch post right away
 api.posts.getAll.useQuery();

  //returns empty div if both arent loaded, since user tends to return faster
  // if(!userLoaded && !postsLoaded) return <div/>
  // if(isLoading) return <LoadingSpinner />
  // if(!data) return <div>Something went wrong</div>

  return (
    <>
      <Head>
        <title>Posty~!</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
      
      <div className="h-full w-full md:max-w-2xl border-x border-slate-400">
    <div className="flex border-b border-slate-400 p-4">
      {!isSignedIn && 
      <div className="flex justify-center"><SignInButton /></div>}
      {isSignedIn && <CreatePostWizard />}
      </div>
      <Feed />
    </div>

      </main>
    </>
  );
};

export default Home;
